'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

exports.default = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$take = _ref.take,
      take = _ref$take === undefined ? function () {
    return { width: window.innerWidth, height: window.innerHeight };
  } : _ref$take,
      _ref$debounce = _ref.debounce,
      debounce = _ref$debounce === undefined ? function (fn) {
    return fn;
  } : _ref$debounce;

  return function (Component) {
    var _class, _temp2;

    return _temp2 = _class = function (_React$Component) {
      _inherits(WindowDimensions, _React$Component);

      function WindowDimensions() {
        var _ref2;

        var _temp, _this, _ret;

        _classCallCheck(this, WindowDimensions);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = WindowDimensions.__proto__ || Object.getPrototypeOf(WindowDimensions)).call.apply(_ref2, [this].concat(args))), _this), _this.state = {
          width: 0,
          height: 0
        }, _this.onResize = debounce(function () {
          // Note that while we're not actually using this state, it will be used to
          // tell React that this component may need to render again.
          _this.setState({
            width: window.innerWidth,
            height: window.innerHeight
          });
        }), _temp), _possibleConstructorReturn(_this, _ret);
      }

      _createClass(WindowDimensions, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
          window.addEventListener('resize', this.onResize, false);
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          window.removeEventListener('resize', this.onResize, false);
        }
      }, {
        key: 'render',
        value: function render() {
          var props = this.props;
          var windowProps = take(props);

          return _react2.default.createElement(Component, _extends({}, props, windowProps));
        }
      }]);

      return WindowDimensions;
    }(_react2.default.Component), _class.displayName = 'WindowDimensions', _temp2;
  };
};